{"version":3,"sources":["reducers/rootReducer.js","containers/fetchWeather.js","components/searchBar.js","components/loader/loader.js","components/forecastWeather/ForecastWeather.js","components/forecastWeather/AveragePressure.js","components/forecastWeather/ForecastWeatherWrapper.js","components/dailyForecast/DailyForecast.js","components/currentWeather/weatherDetails.js","components/currentWeather/CurrentWeather.js","components/currentWeather/CurrentWeatherWrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["initState","weather","forecast","dailyForecast","undefined","searchInput","location","appid","loading","rootReducer","state","arguments","length","action","type","Object","objectSpread","FetchWeather","daily","_this2","this","city","props","weatherForecast","fetch","concat","then","response","json","data","fetchWeather","fetchForecast","finally","setState","_this3","fetchDailyForecast","fetchWeatherDaily","prevProps","Component","connect","dispatch","SearchBar","_ref","onSubmit","onInput","value","react_default","a","createElement","id","e","className","placeholder","loader","ForecastWeather","config","updateHighChartConfig","categories","temp","_this","list","map","item","splitDt_txt","dt_txt","split","year","hour","push","main","chart","title","text","style","color","xAxis","yAxis","series","name","plotOptions","keys","ReactHighcharts_default","averagePressure","pressureList","summary","hasOwnProperty","forEach","pressure","toFixed","forecastWeatherWrapper","AveragePressure","forecastWeather_ForecastWeather","components_loader_loader","DailyForecast","console","log","day","dailyArray","index","weatherDetails","wind","iconUrl","icon","arrowStyle","transform","deg","description","src","alt","humidity","speed","gust","currentWeather","currentWeather_weatherDetails","currentWeatherWrapper","CurrentWeather","App","preventDefault","updateLoader","updateWeather","updateSearchInput","target","searchBar","updateSearchInputValue","handleSubmit","dailyForecast_DailyForecast","CurrentWeatherWrapper","ForecastWeatherWrapper","inputText","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","store","createStore","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e9db890f.chunk.js","sourcesContent":["const initState = {\n    weather: [],\n    forecast: {},\n    dailyForecast: undefined,\n    searchInput: '',\n    location: 'Krakow',\n    appid: '74ab00f9f5d6f488185edff7e764b725',\n    loading: true\n};\n\nconst rootReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'FETCH_WEATHER':\n            return {\n                ...state,\n                weather: [action.weather],\n                loading: false\n            };\n\n        case 'FETCH_FORECAST':\n            return {\n                ...state,\n                forecast: [action.forecast],\n                loading: false\n            };\n\n        case 'FETCH_DAILY_FORECAST':\n            return {\n                ...state,\n                dailyForecast: action.dailyForecast\n            };\n\n        case 'UPDATE_SEARCH_INPUT':\n            return {\n                ...state,\n                searchInput: action.searchInput\n            };\n\n        case 'UPDATE_WEATHER':\n            return {\n                ...state,\n                location: action.location\n            };\n        case 'UPDATE_LOADER':\n            return {\n                ...state,\n                loading: action.loading\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n","import {Component} from 'react'\nimport {connect} from 'react-redux';\n\nclass FetchWeather extends Component {\n    state = {\n        daily: []\n    };\n\n    fetchWeather(city = this.props.location, weatherForecast) {\n        // let dataFor = weatherForecast === 'weather' ? 'weather' : 'forecast';\n\n        fetch(`http://api.openweathermap.org/data/2.5/${weatherForecast}?q=${city}&units=metric&appid=${this.props.appid}`)\n            .then(response => response.json())\n            .then(data => {\n                switch (weatherForecast) {\n                    case 'weather':\n                        this.props.fetchWeather(data);\n                        return;\n\n                    case 'forecast':\n                        this.props.fetchForecast(data);\n                        return;\n                }\n            })\n            .finally(() => this.setState({loading: false}));\n    }\n\n    fetchWeatherDaily(city = this.props.location, weatherForecast = 'forecast') {\n        fetch(`http://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&units=metric&appid=${this.props.appid}&cnt=7`)\n            .then(response => response.json())\n            .then(data => this.props.fetchDailyForecast(data))\n            .finally(() => this.setState({loading: false}));\n    }\n\n    componentDidMount() {\n        this.fetchWeatherDaily();\n        if (this.props.location !== '') {\n            this.fetchWeather(this.props.location, 'weather');\n            this.fetchWeather(this.props.location, 'forecast');\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.location !== this.props.location) {\n            this.fetchWeather(this.props.location, 'weather');\n            this.fetchWeather(this.props.location, 'forecast');\n            this.fetchWeatherDaily();\n        }\n    }\n\n    render() {\n        return null\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        location: state.location,\n        appid: state.appid\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchWeather: (weather) => {\n            dispatch({type: 'FETCH_WEATHER', weather: weather})\n        },\n        fetchForecast: (forecast) => {\n            dispatch({type: 'FETCH_FORECAST', forecast: forecast})\n        },\n        fetchDailyForecast: (dailyForecast) => {\n            dispatch({type: 'FETCH_DAILY_FORECAST', dailyForecast: dailyForecast})\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FetchWeather);\n","import React from 'react';\n\nconst SearchBar = ({onSubmit, onInput, value}) => (\n        <form id=\"search-form\" onSubmit={(e) => onSubmit(e)}>\n            <label>\n                <div className=\"field\">\n                    <p className=\"control has-icons-left\">\n                        <input onInput={(e) => onInput(e)}\n                               value={value} type=\"search\"\n                               className=\"input\" placeholder=\"Kraków\"/>\n                        <span className=\"icon is-small is-left\">\n                                <i className=\"fas fa-map-marker-alt\"/>\n                            </span>\n                    </p>\n                </div>\n            </label>\n            <div className=\"control\">\n                <button className=\"btn btn-primary\">Check weather</button>\n            </div>\n        </form>\n    )\n;\n\nexport default SearchBar;\n","import React from 'react';\n\nconst loader = () => (\n    <div className=\"loader-wrapper\">\n        <div className=\"spinner\">\n            <div className=\"dot1\"/>\n            <div className=\"dot2\"/>\n        </div>\n    </div>\n);\n\nexport default loader;","import React, {Component} from 'react';\nimport ReactHighcharts from 'react-highcharts';\n\nclass ForecastWeather extends Component {\n    state = {\n        config: null\n    };\n\n\n    componentDidMount() {\n        this.updateHighChartConfig();\n    }\n\n\n    componentDidUpdate(prevProps) {\n        if (Object.keys(this.props.forecast).length !== 0) {\n            if (prevProps.forecast === undefined) {\n                this.updateHighChartConfig();\n            } else if (prevProps.forecast.city.name !== this.props.forecast.city.name) {\n                this.updateHighChartConfig();\n            }\n        }\n    }\n\n    updateHighChartConfig = () => {\n        let categories = [],\n            temp = [];\n\n        const {forecast} = this.props;\n\n        forecast.list.map(item => {\n            let splitDt_txt = (item.dt_txt).split(' '),\n                year = splitDt_txt[0].split('2018-'),\n                hour = splitDt_txt[1].split(':');\n\n            temp.push(item.main.temp);\n            categories.push(year[1] + ', ' + hour[0] + 'h');\n            return true;\n        });\n\n        let config = {\n            chart: {\n                type: 'spline'\n            },\n            title: {\n                text: 'Every 3h temperature',\n                style: {\n                    color: '#808080'\n                },\n            },\n            xAxis: {\n                categories: categories\n            },\n            yAxis: {\n                title: {\n                    text: 'Temperature (°C)'\n                }\n            },\n            series: [{\n                name: 'Temperature',\n                data: temp\n            }],\n            plotOptions: {\n                series: {\n                    color: '#808080'\n                }\n            },\n        };\n\n        this.setState({\n            config\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"forecast-weather\">\n                {this.state.config !== null ? (\n                    <ReactHighcharts config={this.state.config}/>\n                ) : (\n                    <div>brak configu</div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default ForecastWeather;\n","import React from 'react';\n\nconst averagePressure = ({forecast}) => {\n    let pressureList = [],\n        summary = 0,\n        averagePressure = 'Checking...';\n\n    if (forecast && forecast.hasOwnProperty('list')) {\n        forecast.list.forEach(item => {\n            pressureList.push(item.main.pressure);\n        });\n\n        pressureList.forEach(item => {\n            summary += item;\n        });\n\n        if ((summary > 0) && (pressureList.length > 0)) {\n            averagePressure = (summary / pressureList.length).toFixed() + ' hPa';\n        } else {\n            averagePressure = 'No data yet'\n        }\n    }\n\n    return (\n        <div className=\"average-pressure\">Week average pressure: {averagePressure}</div>\n    )\n};\n\nexport default averagePressure;\n","import React from 'react';\n\nimport Loader from '../loader/loader';\nimport ForecastWeather from './ForecastWeather';\nimport AveragePressure from './AveragePressure';\n\n\nconst forecastWeatherWrapper = ({forecast}) => {\n    if (forecast.length > 0 && forecast[0].hasOwnProperty('list')) {\n        return (\n            <div>\n                <AveragePressure forecast={forecast[0]}/>\n                <ForecastWeather forecast={forecast[0]}/>\n            </div>\n        )\n    }\n\n    return <Loader/>\n\n};\n\nexport default forecastWeatherWrapper;","import React from 'react';\n\nconst DailyForecast = ({dailyForecast}) => {\n\n    if (dailyForecast !== undefined) {\n        console.log(dailyForecast);\n        dailyForecast.list.map(day => {\n            console.log(day.temp.day)\n        });\n        let dailyArray = dailyForecast.list.map((day, index) => {\n            // return ( console.log(`day ${index}`, day.temp.day) )\n            return ( <li>Dzień {index + 1}: {day.temp.day} °C</li> )\n        });\n        return ( <div>{dailyArray}</div> )\n    }\n\n    return (\n        <div>placeholder for daily forecast</div>\n    )\n};\n\nexport default DailyForecast;","import React from 'react';\n\nconst weatherDetails = ({name, main, weather, wind}) => {\n    let iconUrl = `http://openweathermap.org/img/w/${weather.icon}.png`;\n    const arrowStyle = {\n        transform: `rotate(${wind.deg}deg)`\n    };\n    return (\n        <div>\n            <h2 className=\"name\">{name}</h2>\n            <p className=\"description\">{weather.description}</p>\n\n            <div className=\"details\">\n                <div className=\"icon-temperature\">\n                    <img src={iconUrl} alt={weather.main}/>\n                    <span className=\"temperature\">{main.temp} &#8451;</span>\n                </div>\n                <div className=\"humidity-pressure\">\n                    <div>Humidity: {main.humidity}%</div>\n                    <div>Pressure: {main.pressure} hPa</div>\n                </div>\n\n                <div className=\"wind\">\n                    <div>Wind: {wind.speed} km/h</div>\n                    {wind.gust ? <div>Gust: {wind.gust} km/h</div> : null}\n                </div>\n                <div className=\"wind-direction\">\n                    <i className=\"fas fa-arrow-up\" style={arrowStyle}/>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default weatherDetails;","import React from 'react';\nimport WeatherDetails from './weatherDetails';\n\nconst currentWeather = ({weather}) => {\n    let weatherDetails;\n\n    if (weather && weather.hasOwnProperty('main')) {\n        weatherDetails = <WeatherDetails name={weather.name} main={weather.main} weather={weather.weather[0]} wind={weather.wind}/>;\n    }\n\n    return (\n        <div className=\"current-weather\">\n            {weatherDetails}\n        </div>\n    )\n};\n\nexport default currentWeather;","import React from 'react';\n\nimport Loader from '../loader/loader';\nimport CurrentWeather from './CurrentWeather';\n\nconst currentWeatherWrapper = ({weather}) => {\n    if (weather.length > 0 && weather[0].hasOwnProperty('weather')) {\n        return <CurrentWeather weather={weather[0]}/>\n    }\n\n    return <Loader/>\n\n};\n\nexport default currentWeatherWrapper;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport './styles/main.css';\n\nimport FetchWeather from './containers/fetchWeather';\n\n\nimport SearchBar from './components/searchBar';\n// import CurrentWeather from './components/currentWeather/CurrentWeather';\nimport ForecastWeather from './components/forecastWeather/ForecastWeatherWrapper';\n// import AveragePressure from './components/forecastWeather/AveragePressure';\n// import CityNotFound from './components/cityNotFound';\n\nimport DailyForecast from './components/dailyForecast/DailyForecast';\n\n\nimport CurrentWeather from './components/currentWeather/CurrentWeatherWrapper';\n\n\n\nclass App extends Component {\n    handleSubmit(e) {\n        e.preventDefault();\n        if (this.props.searchInput !== this.props.location) {\n            this.props.updateLoader(true);\n            this.props.updateWeather(this.props.searchInput);\n        }\n    }\n\n    updateSearchInputValue(e) {\n        this.props.updateSearchInput(e.target.value);\n    }\n\n    render() {\n        // console.log(this.props.forecast);\n        return (\n            <div id=\"app\">\n                <FetchWeather/>\n                <SearchBar onInput={(e) => this.updateSearchInputValue(e)} onSubmit={(e) => this.handleSubmit(e)}\n                           value={this.props.searchInput}/>\n\n                <DailyForecast dailyForecast={this.props.dailyForecast} />\n                <CurrentWeather weather={this.props.weather} />\n                <ForecastWeather forecast={this.props.forecast} />\n\n\n                {/*{Object.keys(this.props.weather).length === 0 ? (*/}\n                    {/*<div>Wpisz miasto dla ktorego chcesz sprawdzic pogode</div>*/}\n                {/*) : this.props.loading ? (*/}\n                    {/*<div className=\"loader-wrapper\">*/}\n                        {/*<Loader/>*/}\n                    {/*</div>*/}\n                {/*) : this.props.weather[0].cod === 404 || this.props.weather[0].cod === 400 ? (*/}\n                    {/*<CityNotFound city={this.props.location}/>*/}\n                {/*) : (*/}\n                    {/*<div>*/}\n                        {/*<CurrentWeather weather={this.props.weather[0]}/>*/}\n                        {/*<AveragePressure forecast={this.props.forecast[0]}/>*/}\n                        {/*<WeatherForecast forecast={this.props.forecast[0]}/>*/}\n                    {/*</div>*/}\n                {/*)}*/}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.loading,\n        weather: state.weather,\n        forecast: state.forecast,\n        searchInput: state.searchInput,\n        location: state.location,\n        dailyForecast: state.dailyForecast\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchWeather: (weather) => {\n            dispatch({type: 'FETCH_WEATHER', weather: weather})\n        },\n        updateSearchInput: (inputText) => {\n            dispatch({type: 'UPDATE_SEARCH_INPUT', searchInput: inputText})\n        },\n        updateWeather: (location) => {\n            dispatch({type: 'UPDATE_WEATHER', location: location})\n        },\n        updateLoader: (loading) => {\n            dispatch({type: 'UPDATE_LOADER', loading: loading})\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport rootReducer from './reducers/rootReducer';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('weather-app'));\nregisterServiceWorker();\n"],"sourceRoot":""}