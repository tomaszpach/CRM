{"version":3,"sources":["reducers/rootReducer.js","containers/fetchWeather.js","components/loader/loader.js","components/searchBar.js","components/currentWeather/weatherDetails.js","components/currentWeather/currentWeather.js","components/weatherForecast.js","components/averagePressure.js","components/cityNotFound.js","App.js","registerServiceWorker.js","index.js"],"names":["initState","weather","forecast","searchInput","location","appid","loading","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","FetchWeather","_this","this","city","props","weatherForecast","dataFor","fetch","concat","then","response","json","data","setState","defineProperty","fetchWeather","fetchForecast","finally","prevProps","Component","connect","dispatch","loader","react_default","a","createElement","className","SearchBar","_ref","onSubmit","onInput","value","id","e","placeholder","weatherDetails","name","main","wind","iconUrl","icon","arrowStyle","transform","deg","description","src","alt","temp","humidity","pressure","speed","gust","style","currentWeather","hasOwnProperty","currentWeather_weatherDetails","WeatherForecast","config","updateHighChartConfig","categories","list","map","item","splitDt_txt","dt_txt","split","year","hour","push","chart","title","text","color","xAxis","yAxis","series","plotOptions","keys","ReactHighcharts_default","averagePressure","pressureList","summary","forEach","toFixed","cityNotFound","App","preventDefault","updateLoader","updateWeather","updateSearchInput","target","containers_fetchWeather","searchBar","updateSearchInputValue","handleSubmit","components_loader_loader","cod","components_cityNotFound","components_currentWeather_currentWeather","components_averagePressure","components_weatherForecast","inputText","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","createStore","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7fad5f6d.chunk.js","sourcesContent":["const initState = {\r\n    weather: {},\r\n    forecast: {},\r\n    searchInput: '',\r\n    location: 'Krakow',\r\n    appid: '74ab00f9f5d6f488185edff7e764b725',\r\n    loading: true\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_WEATHER':\r\n            return {\r\n                ...state,\r\n                weather: [action.weather],\r\n                loading: false\r\n            };\r\n\r\n        case 'FETCH_FORECAST':\r\n            return {\r\n                ...state,\r\n                forecast: [action.forecast],\r\n                loading: false\r\n            };\r\n\r\n        case 'UPDATE_SEARCH_INPUT':\r\n            return {\r\n                ...state,\r\n                searchInput: action.searchInput\r\n            };\r\n\r\n        case 'UPDATE_WEATHER':\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                location: action.location\r\n            };\r\n        case 'UPDATE_LOADER':\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import {Component} from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass FetchWeather extends Component {\r\n    fetchWeather(city = this.props.searchInput, weatherForecast) {\r\n        let dataFor = weatherForecast === 'weather' ? 'weather' : 'forecast';\r\n\r\n        fetch(`http://api.openweathermap.org/data/2.5/${weatherForecast}?q=${city}&units=metric&appid=${this.props.appid}`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState({\r\n                [dataFor]: data\r\n            }, () => {\r\n                if (dataFor === 'weather') {\r\n                    this.props.fetchWeather(data);\r\n                } else {\r\n                    this.props.fetchForecast(data);\r\n                }\r\n            }))\r\n            .finally(() => this.setState({loading: false}));\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.location !== '') {\r\n            this.fetchWeather(this.props.location, 'weather');\r\n            this.fetchWeather(this.props.location, 'forecast');\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.location !== this.props.location) {\r\n            this.fetchWeather(this.props.location, 'weather');\r\n            this.fetchWeather(this.props.location, 'forecast');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        location: state.location,\r\n        appid: state.appid\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchWeather: (weather) => { dispatch({ type: 'FETCH_WEATHER', weather: weather }) },\r\n        fetchForecast: (forecast) => { dispatch({ type: 'FETCH_FORECAST', forecast: forecast }) }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FetchWeather);\r\n","import React from 'react';\r\n\r\nconst loader = () => (\r\n    <div className=\"spinner\">\r\n        <div className=\"dot1\"/>\r\n        <div className=\"dot2\"/>\r\n    </div>\r\n);\r\n\r\nexport default loader;","import React from 'react';\r\n\r\nconst SearchBar = ({onSubmit, onInput, value}) => (\r\n        <form id=\"search-form\" onSubmit={(e) => onSubmit(e)}>\r\n            <label>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input onInput={(e) => onInput(e)}\r\n                               value={value} type=\"search\"\r\n                               className=\"input\" placeholder=\"Kraków\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-map-marker-alt\"/>\r\n                            </span>\r\n                    </p>\r\n                </div>\r\n            </label>\r\n            <div className=\"control\">\r\n                <button className=\"btn btn-primary\">Check weather</button>\r\n            </div>\r\n        </form>\r\n    )\r\n;\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst weatherDetails = ({name, main, weather, wind}) => {\r\n    let iconUrl = `http://openweathermap.org/img/w/${weather.icon}.png`;\r\n    const arrowStyle = {\r\n        transform: `rotate(${wind.deg}deg)`\r\n    };\r\n    return (\r\n        <div>\r\n            <h2 className=\"name\">{name}</h2>\r\n            <p className=\"description\">{weather.description}</p>\r\n\r\n            <div className=\"details\">\r\n                <div className=\"icon-temperature\">\r\n                    <img src={iconUrl} alt={weather.main}/>\r\n                    <span className=\"temperature\">{main.temp} &#8451;</span>\r\n                </div>\r\n                <div className=\"humidity-pressure\">\r\n                    <div>Humidity: {main.humidity}%</div>\r\n                    <div>Pressure: {main.pressure} hPa</div>\r\n                </div>\r\n\r\n                <div className=\"wind\">\r\n                    <div>Wind: {wind.speed} km/h</div>\r\n                    {wind.gust ? <div>Gust: {wind.gust} km/h</div> : null}\r\n                </div>\r\n                <div className=\"wind-direction\">\r\n                    <i className=\"fas fa-arrow-up\" style={arrowStyle}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default weatherDetails;","import React from 'react';\r\nimport WeatherDetails from './weatherDetails';\r\n\r\nconst currentWeather = ({weather}) => {\r\n    let weatherDetails;\r\n\r\n    if (weather && weather.hasOwnProperty('main')) {\r\n        weatherDetails = <WeatherDetails name={weather.name} main={weather.main} weather={weather.weather[0]} wind={weather.wind}/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"current-weather\">\r\n            {weatherDetails}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default currentWeather;","import React, {Component} from 'react';\r\nimport ReactHighcharts from 'react-highcharts';\r\n\r\nclass WeatherForecast extends Component {\r\n    state = {\r\n        config: null\r\n    };\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (Object.keys(this.props.forecast).length !== 0) {\r\n            if (prevProps.forecast === undefined) {\r\n                this.updateHighChartConfig();\r\n            } else if (prevProps.forecast.city.name !== this.props.forecast.city.name) {\r\n                this.updateHighChartConfig();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateHighChartConfig = () => {\r\n        let categories = [],\r\n            temp = [];\r\n\r\n        const {forecast} = this.props;\r\n\r\n        if (forecast && forecast.hasOwnProperty('list')) {\r\n            forecast.list.map(item => {\r\n                let splitDt_txt = (item.dt_txt).split(' '),\r\n                    year = splitDt_txt[0].split('2018-'),\r\n                    hour = splitDt_txt[1].split(':');\r\n\r\n                temp.push(item.main.temp);\r\n                categories.push(year[1] + ', ' + hour[0] + 'h');\r\n                return true;\r\n            });\r\n        }\r\n\r\n        let config = {\r\n            chart: {\r\n                type: 'spline'\r\n            },\r\n            title: {\r\n                text: 'Every 3h temperature',\r\n                style: {\r\n                    color: '#808080'\r\n                },\r\n            },\r\n            xAxis: {\r\n                categories: categories\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Temperature (°C)'\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Temperature',\r\n                data: temp\r\n            }],\r\n            plotOptions: {\r\n                series: {\r\n                    color: '#808080'\r\n                }\r\n            },\r\n        };\r\n\r\n        this.setState({\r\n            config\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"forecast-weather\">\r\n                {this.state.config !== null ? (\r\n                    <ReactHighcharts config={this.state.config}/>\r\n                ) : (<div>brak configu</div>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherForecast;\r\n","import React from 'react';\r\n\r\nconst averagePressure = ({forecast}) => {\r\n    let pressureList = [],\r\n        summary = 0,\r\n        averagePressure = 'Checking...';\r\n\r\n    if (forecast && forecast.hasOwnProperty('list')) {\r\n        forecast.list.forEach(item => {\r\n            pressureList.push(item.main.pressure);\r\n        });\r\n\r\n        pressureList.forEach(item => {\r\n            summary += item;\r\n        });\r\n\r\n        if ((summary > 0) && (pressureList.length > 0)) {\r\n            averagePressure = (summary / pressureList.length).toFixed() + ' hPa';\r\n        } else {\r\n            averagePressure = 'No data yet'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"average-pressure\">Week average pressure: {averagePressure}</div>\r\n    )\r\n};\r\n\r\nexport default averagePressure;\r\n","import React from 'react';\r\n\r\nconst cityNotFound = ({city}) => (\r\n    <div id=\"not-found\">\r\n        <h2><b>{city}</b>, not found.</h2>\r\n        <p>Please try other city or check if you do not have a typo.</p>\r\n    </div>\r\n);\r\n\r\nexport default cityNotFound;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './styles/main.css';\r\n\r\nimport FetchWeather from './containers/fetchWeather';\r\n\r\nimport Loader from './components/loader/loader';\r\nimport SearchBar from './components/searchBar';\r\nimport CurrentWeather from './components/currentWeather/currentWeather';\r\nimport WeatherForecast from './components/weatherForecast';\r\nimport AveragePressure from './components/averagePressure';\r\nimport CityNotFound from './components/cityNotFound';\r\n\r\nclass App extends Component {\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.props.searchInput !== this.props.location) {\r\n            this.props.updateLoader(true);\r\n            this.props.updateWeather(this.props.searchInput);\r\n        }\r\n    }\r\n\r\n    updateSearchInputValue(e) {\r\n        this.props.updateSearchInput(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"app\">\r\n                <FetchWeather/>\r\n                <SearchBar onInput={(e) => this.updateSearchInputValue(e)} onSubmit={(e) => this.handleSubmit(e)}\r\n                           value={this.props.searchInput}/>\r\n                {Object.keys(this.props.weather).length === 0 ? (\r\n                    <div>Wpisz miasto dla ktorego chcesz sprawdzic pogode</div>\r\n                ) : this.props.loading ? (\r\n                    <div className=\"loader-wrapper\">\r\n                        <Loader/>\r\n                    </div>\r\n                ) : this.props.weather[0].cod === 404 || this.props.weather[0].cod === 400 ? (\r\n                    <CityNotFound city={this.props.location}/>\r\n                ) : (\r\n                    <div>\r\n                        <CurrentWeather weather={this.props.weather[0]}/>\r\n                        <AveragePressure forecast={this.props.forecast[0]}/>\r\n                        <WeatherForecast forecast={this.props.forecast[0]}/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.loading,\r\n        weather: state.weather,\r\n        forecast: state.forecast,\r\n        searchInput: state.searchInput,\r\n        location: state.location\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchWeather: (weather) => {\r\n            dispatch({type: 'FETCH_WEATHER', weather: weather})\r\n        },\r\n        updateSearchInput: (inputText) => {\r\n            dispatch({type: 'UPDATE_SEARCH_INPUT', searchInput: inputText})\r\n        },\r\n        updateWeather: (location) => {\r\n            dispatch({type: 'UPDATE_WEATHER', location: location})\r\n        },\r\n        updateLoader: (loading) => {\r\n            dispatch({type: 'UPDATE_LOADER', loading: loading})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('weather-app'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}