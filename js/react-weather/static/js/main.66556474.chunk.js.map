{"version":3,"sources":["reducers/rootReducer.js","containers/fetchWeather.js","components/searchBar.js","components/loader/loader.js","components/forecastWeather/ForecastWeather.js","components/forecastWeather/AveragePressure.js","components/forecastWeather/ForecastWeatherWrapper.js","components/dailyForecast/NextDay.js","components/dailyForecast/WeatherIcon.js","components/dailyForecast/WeekDay.js","components/dailyForecast/DayTemperature.js","components/dailyForecast/OneDay.js","components/dailyForecast/DailyForecast.js","components/currentWeather/weatherDetails.js","components/currentWeather/CurrentWeather.js","components/currentWeather/CurrentWeatherWrapper.js","App.js","registerServiceWorker.js","index.js"],"names":["initState","weather","forecast","dailyForecast","undefined","searchInput","location","appid","loading","rootReducer","state","arguments","length","action","type","Object","objectSpread","cityFound","cod","FetchWeather","_this","this","city","props","weatherForecast","fetch","concat","then","response","json","data","fetchWeather","fetchForecast","finally","setState","_this2","fetchDailyForecast","fetchWeatherDaily","prevProps","Component","connect","dispatch","SearchBar","_ref","onSubmit","onInput","value","react_default","a","createElement","id","e","className","defaultValue","placeholder","loader","ForecastWeather","config","updateHighChartConfig","categories","temp","list","map","item","splitDt_txt","dt_txt","split","year","hour","push","main","chart","title","text","style","color","xAxis","yAxis","series","name","plotOptions","keys","ReactHighcharts_default","averagePressure","pressureList","summary","hasOwnProperty","forEach","pressure","toFixed","forecastWeatherWrapper","AveragePressure","forecastWeather_ForecastWeather","components_loader_loader","NextDay","nextDayText","day","WeatherIcon","icon","description","src","alt","WeekDay","dayTimestamp","Date","getDay","DayTemperature","fixedTempDay","temperature","OneDay","_this$props","dayData","dailyForecast_NextDay","dt","dailyForecast_WeekDay","dailyForecast_WeatherIcon","dailyForecast_DayTemperature","speed","clouds","width","height","humidity","React","DailyForecast","index","dailyForecast_OneDay","key","weatherDetails","wind","iconUrl","arrowStyle","transform","deg","gust","currentWeather","currentWeather_weatherDetails","currentWeatherWrapper","CurrentWeather","App","preventDefault","updateLoader","updateWeather","updateSearchInput","target","searchBar","updateSearchInputValue","handleSubmit","dailyForecast_DailyForecast","CurrentWeatherWrapper","ForecastWeatherWrapper","inputText","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","createStore","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.66556474.chunk.js","sourcesContent":["const initState = {\r\n    weather: [],\r\n    forecast: {},\r\n    dailyForecast: undefined,\r\n    searchInput: '',\r\n    location: 'Krakow',\r\n    appid: '74ab00f9f5d6f488185edff7e764b725',\r\n    loading: true\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_WEATHER':\r\n            return {\r\n                ...state,\r\n                weather: [action.weather],\r\n                cityFound: action.weather.cod !== 404,\r\n                loading: false\r\n            };\r\n\r\n        case 'FETCH_FORECAST':\r\n            return {\r\n                ...state,\r\n                forecast: [action.forecast],\r\n                loading: false\r\n            };\r\n\r\n        case 'FETCH_DAILY_FORECAST':\r\n            return {\r\n                ...state,\r\n                dailyForecast: action.dailyForecast\r\n            };\r\n\r\n        case 'UPDATE_SEARCH_INPUT':\r\n            return {\r\n                ...state,\r\n                searchInput: action.searchInput\r\n            };\r\n\r\n        case 'UPDATE_WEATHER':\r\n            return {\r\n                ...state,\r\n                location: action.location\r\n            };\r\n        case 'UPDATE_LOADER':\r\n            return {\r\n                ...state,\r\n                loading: action.loading\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\n\r\nclass FetchWeather extends Component {\r\n\r\n    fetchWeather(city = this.props.location, weatherForecast) {\r\n        fetch(`http://api.openweathermap.org/data/2.5/${weatherForecast}?q=${city}&units=metric&appid=${this.props.appid}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                switch (weatherForecast) {\r\n                    case 'weather':\r\n                        this.props.fetchWeather(data);\r\n                        return;\r\n\r\n                    case 'forecast':\r\n                        this.props.fetchForecast(data);\r\n                        return;\r\n\r\n                    default:\r\n                        this.props.fetchWeather(data);\r\n                        return;\r\n                }\r\n            })\r\n            .finally(() => this.setState({loading: false}));\r\n    }\r\n\r\n    fetchWeatherDaily(city = this.props.location) {\r\n        fetch(`http://api.openweathermap.org/data/2.5/forecast/daily?q=${city}&units=metric&appid=${this.props.appid}&cnt=6`)\r\n            .then(response => response.json())\r\n            .then(data => this.props.fetchDailyForecast(data))\r\n            .finally(() => this.setState({loading: false}));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchWeatherDaily();\r\n        if (this.props.location !== '') {\r\n            this.fetchWeather(this.props.location, 'weather');\r\n            this.fetchWeather(this.props.location, 'forecast');\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.location !== this.props.location) {\r\n            this.fetchWeather(this.props.location, 'weather');\r\n            this.fetchWeather(this.props.location, 'forecast');\r\n            this.fetchWeatherDaily();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        location: state.location,\r\n        appid: state.appid\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchWeather: (weather) => {\r\n            dispatch({type: 'FETCH_WEATHER', weather: weather})\r\n        },\r\n        fetchForecast: (forecast) => {\r\n            dispatch({type: 'FETCH_FORECAST', forecast: forecast})\r\n        },\r\n        fetchDailyForecast: (dailyForecast) => {\r\n            dispatch({type: 'FETCH_DAILY_FORECAST', dailyForecast: dailyForecast})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FetchWeather);\r\n","import React from 'react';\r\n\r\nconst SearchBar = ({onSubmit, onInput, value}) => (\r\n        <form id=\"search-form\" onSubmit={(e) => onSubmit(e)}>\r\n            <label>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input onInput={(e) => onInput(e)}\r\n                               defaultValue={value} type=\"search\"\r\n                               className=\"input\" placeholder=\"Kraków\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-map-marker-alt\"/>\r\n                            </span>\r\n                    </p>\r\n                </div>\r\n            </label>\r\n            <div className=\"control\">\r\n                <button className=\"btn btn-primary\">Check weather</button>\r\n            </div>\r\n        </form>\r\n    )\r\n;\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst loader = () => (\r\n    <div className=\"loader-wrapper\">\r\n        <div className=\"spinner\">\r\n            <div className=\"dot1\"/>\r\n            <div className=\"dot2\"/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default loader;","import React, {Component} from 'react';\r\nimport ReactHighcharts from 'react-highcharts';\r\n\r\nclass ForecastWeather extends Component {\r\n    state = {\r\n        config: null\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.updateHighChartConfig();\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (Object.keys(this.props.forecast).length !== 0) {\r\n            if (prevProps.forecast === undefined) {\r\n                this.updateHighChartConfig();\r\n            } else if (prevProps.forecast.city.name !== this.props.forecast.city.name) {\r\n                this.updateHighChartConfig();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateHighChartConfig = () => {\r\n        let categories = [],\r\n            temp = [];\r\n\r\n        const {forecast} = this.props;\r\n\r\n        forecast.list.map(item => {\r\n            let splitDt_txt = (item.dt_txt).split(' '),\r\n                year = splitDt_txt[0].split('2018-'),\r\n                hour = splitDt_txt[1].split(':');\r\n\r\n            temp.push(item.main.temp);\r\n            categories.push(year[1] + ', ' + hour[0] + 'h');\r\n            return true;\r\n        });\r\n\r\n        let config = {\r\n            chart: {\r\n                type: 'spline'\r\n            },\r\n            title: {\r\n                text: 'Every 3h temperature',\r\n                style: {\r\n                    color: '#808080'\r\n                },\r\n            },\r\n            xAxis: {\r\n                categories: categories\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'Temperature (°C)'\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Temperature',\r\n                data: temp\r\n            }],\r\n            plotOptions: {\r\n                series: {\r\n                    color: '#808080'\r\n                }\r\n            },\r\n        };\r\n\r\n        this.setState({\r\n            config\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"forecast-weather\">\r\n                {this.state.config !== null ? (\r\n                    <ReactHighcharts config={this.state.config}/>\r\n                ) : (\r\n                    <div>brak configu</div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForecastWeather;\r\n","import React from 'react';\r\n\r\nconst averagePressure = ({forecast}) => {\r\n    let pressureList = [],\r\n        summary = 0,\r\n        averagePressure = 'Checking...';\r\n\r\n    if (forecast && forecast.hasOwnProperty('list')) {\r\n        forecast.list.forEach(item => {\r\n            pressureList.push(item.main.pressure);\r\n        });\r\n\r\n        pressureList.forEach(item => {\r\n            summary += item;\r\n        });\r\n\r\n        if ((summary > 0) && (pressureList.length > 0)) {\r\n            averagePressure = (summary / pressureList.length).toFixed() + ' hPa';\r\n        } else {\r\n            averagePressure = 'No data yet'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"average-pressure\">Week average pressure: {averagePressure}</div>\r\n    )\r\n};\r\n\r\nexport default averagePressure;\r\n","import React from 'react';\r\n\r\nimport Loader from '../loader/loader';\r\nimport ForecastWeather from './ForecastWeather';\r\nimport AveragePressure from './AveragePressure';\r\n\r\n\r\nconst forecastWeatherWrapper = ({forecast}) => {\r\n    if (forecast.length > 0 && forecast[0].hasOwnProperty('list')) {\r\n        return (\r\n            <div>\r\n                <AveragePressure forecast={forecast[0]}/>\r\n                <ForecastWeather forecast={forecast[0]}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return <Loader/>\r\n\r\n};\r\n\r\nexport default forecastWeatherWrapper;","import React from 'react';\r\n\r\nconst NextDay = ({day}) => {\r\n    let nextDayText;\r\n    if (day === 0) {\r\n        nextDayText = 'Dziś'\r\n    } else if (day === 1) {\r\n        nextDayText = 'Jutro'\r\n    } else if (day === 2) {\r\n        nextDayText = 'Pojutrze'\r\n    } else {\r\n        nextDayText = `Za ${day + 1} dni`\r\n    }\r\n\r\n    return (\r\n        <div className=\"tiles-title\">{nextDayText}</div>\r\n    )\r\n};\r\n\r\nexport default NextDay;\r\n","import React from 'react';\r\n\r\nconst WeatherIcon = ({weather}) => {\r\n    const {icon, description} = weather;\r\n\r\n    return <img src={`http://openweathermap.org/img/w/${icon}.png`} alt={description} className=\"pull-right\"/>\r\n};\r\n\r\nexport default WeatherIcon;\r\n","import React from 'react';\r\n\r\nconst WeekDay = ({dayTimestamp}) => {\r\n    const date = new Date(dayTimestamp * 1000);\r\n\r\n    const daysArray = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'];\r\n    const day = daysArray[date.getDay()];\r\n\r\n    return (\r\n        <div className=\"pull-left\">{day}</div>\r\n    )\r\n};\r\n\r\nexport default WeekDay;\r\n","import React from 'react';\r\n\r\nconst DayTemperature = ({temperature}) => {\r\n    const fixedTempDay = temperature.day.toFixed();\r\n    return (\r\n        <div className=\"pull-right\">{fixedTempDay}°C</div>\r\n    )\r\n};\r\n\r\nexport default DayTemperature;\r\n","import React from 'react';\r\nimport NextDay from './NextDay';\r\nimport WeatherIcon from './WeatherIcon';\r\nimport WeekDay from './WeekDay';\r\nimport DayTemperature from './DayTemperature';\r\n\r\nclass OneDay extends React.Component {\r\n    render() {\r\n        const {dayData, day} = this.props;\r\n\r\n        return (\r\n            <div className=\"col-md-4 col-sm-4 tile-wrapper\">\r\n                <div className=\"tiles red weather-widget\">\r\n                    <div className=\"tiles-body\">\r\n                        <NextDay dayTimestamp={dayData.dt} day={day}/>\r\n                        <div className=\"heading\">\r\n                            <WeekDay dayTimestamp={dayData.dt} />\r\n                            <WeatherIcon weather={dayData.weather[0]} />\r\n                            <DayTemperature temperature={dayData.temp}/>\r\n                            <div className=\"clearfix\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"tile-footer\">\r\n                        <div className=\"pull-left\">\r\n                            <div>Wiatr: {dayData.speed} m/s</div>\r\n                            <div>Zachmurzenie: {dayData.clouds}%</div>\r\n                        </div>\r\n                        <div className=\"pull-right\">\r\n                            <canvas id=\"rain\" width=\"32\" height=\"32\"></canvas>\r\n                            <span className=\"text-white small-text-description\">Wilgotność: {dayData.humidity}%</span></div>\r\n                        <div className=\"clearfix\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OneDay;\r\n","import React from 'react';\r\n\r\nimport Loader from '../loader/loader';\r\nimport OneDay from './OneDay';\r\n\r\nconst DailyForecast = ({dailyForecast}) => {\r\n    let days = undefined;\r\n    if (dailyForecast !== undefined && dailyForecast.hasOwnProperty('list')) {\r\n        days = dailyForecast.list.map((item, index) => {\r\n            return <OneDay dayData={item} day={index} key={index}/>\r\n        })\r\n    } else {\r\n        days = <Loader/>\r\n    }\r\n\r\n    return days\r\n};\r\n\r\nexport default DailyForecast;\r\n","import React from 'react';\r\n\r\nconst weatherDetails = ({name, main, weather, wind}) => {\r\n    let iconUrl = `http://openweathermap.org/img/w/${weather.icon}.png`;\r\n    const arrowStyle = {\r\n        transform: `rotate(${wind.deg}deg)`\r\n    };\r\n    return (\r\n        <div>\r\n            <h2 className=\"name\">{name}</h2>\r\n            <p className=\"description\">{weather.description}</p>\r\n\r\n            <div className=\"details\">\r\n                <div className=\"icon-temperature\">\r\n                    <img src={iconUrl} alt={weather.main}/>\r\n                    <span className=\"temperature\">{main.temp} &#8451;</span>\r\n                </div>\r\n                <div className=\"humidity-pressure\">\r\n                    <div>Humidity: {main.humidity}%</div>\r\n                    <div>Pressure: {main.pressure} hPa</div>\r\n                </div>\r\n\r\n                <div className=\"wind\">\r\n                    <div>Wind: {wind.speed} m/s</div>\r\n                    {wind.gust ? <div>Gust: {wind.gust} m/s</div> : null}\r\n                </div>\r\n                <div className=\"wind-direction\">\r\n                    <i className=\"fas fa-arrow-up\" style={arrowStyle}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default weatherDetails;\r\n","import React from 'react';\r\nimport WeatherDetails from './weatherDetails';\r\n\r\nconst currentWeather = ({weather}) => {\r\n    let weatherDetails;\r\n\r\n    if (weather && weather.hasOwnProperty('main')) {\r\n        weatherDetails = <WeatherDetails name={weather.name} main={weather.main} weather={weather.weather[0]} wind={weather.wind}/>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"current-weather\">\r\n            {weatherDetails}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default currentWeather;","import React from 'react';\r\n\r\nimport Loader from '../loader/loader';\r\nimport CurrentWeather from './CurrentWeather';\r\n\r\nconst currentWeatherWrapper = ({weather}) => {\r\n    if (weather.length > 0 && weather[0].hasOwnProperty('weather')) {\r\n        return <CurrentWeather weather={weather[0]}/>\r\n    }\r\n\r\n    return <Loader/>\r\n\r\n};\r\n\r\nexport default currentWeatherWrapper;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport FetchWeather from './containers/fetchWeather';\r\n\r\nimport SearchBar from './components/searchBar';\r\nimport ForecastWeather from './components/forecastWeather/ForecastWeatherWrapper';\r\nimport DailyForecast from './components/dailyForecast/DailyForecast';\r\nimport CurrentWeather from './components/currentWeather/CurrentWeatherWrapper';\r\n\r\nclass App extends Component {\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.props.searchInput !== this.props.location) {\r\n            this.props.updateLoader(true);\r\n            this.props.updateWeather(this.props.searchInput);\r\n        }\r\n    }\r\n\r\n    updateSearchInputValue(e) {\r\n        this.props.updateSearchInput(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"app\">\r\n                <FetchWeather/>\r\n                <SearchBar onInput={(e) => this.updateSearchInputValue(e)} onSubmit={(e) => this.handleSubmit(e)}\r\n                           value={this.props.searchInput}/>\r\n\r\n                <DailyForecast dailyForecast={this.props.dailyForecast} />\r\n                <CurrentWeather weather={this.props.weather} />\r\n                <ForecastWeather forecast={this.props.forecast} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loading: state.loading,\r\n        weather: state.weather,\r\n        forecast: state.forecast,\r\n        searchInput: state.searchInput,\r\n        location: state.location,\r\n        dailyForecast: state.dailyForecast,\r\n        cityFound: state.cityFound\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchWeather: (weather) => {\r\n            dispatch({type: 'FETCH_WEATHER', weather: weather})\r\n        },\r\n        updateSearchInput: (inputText) => {\r\n            dispatch({type: 'UPDATE_SEARCH_INPUT', searchInput: inputText})\r\n        },\r\n        updateWeather: (location) => {\r\n            dispatch({type: 'UPDATE_WEATHER', location: location})\r\n        },\r\n        updateLoader: (loading) => {\r\n            dispatch({type: 'UPDATE_LOADER', loading: loading})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\nimport App from './App';\r\nimport './styles/main.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('weather-app'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}